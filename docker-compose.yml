services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    ports:
      - '127.0.0.1:5432:5432'
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    # for electricsql
    command:
      - -c
      - listen_addresses=*
      - -c
      - wal_level=logical
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U jide']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  electric:
    image: docker.io/electricsql/electric:latest
    environment:
      DATABASE_URL: ${DATABASE_URL}
      # Not suitable for production. Only use insecure mode in development or if you've otherwise secured the Electric API.
      # See https://electric-sql.com/docs/guides/security
      ELECTRIC_INSECURE: true
    ports:
      - '127.0.0.1:3002:3000'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    ports:
      - '127.0.0.1:5050:80'
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=${PGADMIN_CONFIG_SERVER_MODE}
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=${PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: chatapp-backend:latest
    ports:
      - '127.0.0.1:3001:3001'
    environment:
      - REQUESTY_API_KEY=${REQUESTY_API_KEY}
      - REQUESTY_BASE_URL=${REQUESTY_BASE_URL}
      - OPEN_ROUTER_BASE_URL=${OPEN_ROUTER_BASE_URL}
      - OPEN_ROUTER_API_KEY=${OPEN_ROUTER_API_KEY}
      - AUTH_TOKEN=${AUTH_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
      - CORS_ORIGIN=${CORS_ORIGIN}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
    image: chatapp-frontend:latest
    ports:
      - '127.0.0.1:3000:80' # Fixed: bind to localhost for security
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  app-network:
    driver: bridge
