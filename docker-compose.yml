services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    ports:
      - '127.0.0.1:5432:5432' # Only bind to localhost for security
    environment:
      - POSTGRES_DB=aiapp
      - POSTGRES_USER=aiuser
      - POSTGRES_PASSWORD=your_secure_password_here
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d # Optional: init scripts
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U aiuser -d aiapp']
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    ports:
      - '127.0.0.1:5050:80'
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@yourdomain.com
      - PGADMIN_DEFAULT_PASSWORD=admin_password_here
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: chatapp-backend:latest
    ports:
      - '127.0.0.1:3001:3001'
    env_file:
      - ./backend/.env
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
    image: chatapp-frontend:latest
    ports:
      - '3000:80'
    env_file:
      - ./frontend/.env
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
